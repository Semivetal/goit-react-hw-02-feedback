{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","App.module.css","components/Statistics/Statistics.module.css","components/Statistics/Statistics.js","components/Notification/Notification.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","stats","Notification","message","FeedbackOptions","options","onLeaveFeedback","container","Object","keys","map","option","button","onClick","Section","title","children","section","App","state","handleFeedback","feedback","setState","prevState","countTotalFeedback","values","reduce","acc","value","countPositiveFeedbackPercentage","Math","round","this","percent","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,OAAS,gCAAgC,UAAY,qC,gBCAvED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,oBCA7DD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAW,sBAAsB,gBAAgB,2BAA2B,aAAa,wBAAwB,WAAW,sBAAsB,UAAY,yB,gBCAvMD,EAAOC,QAAU,CAAC,MAAQ,4B,sLCsBXC,MApBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,qBAAIC,UAAWC,IAAOC,MAAtB,UACE,wCAAWP,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,WCASI,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,K,gBCqBEC,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKP,UAAWC,IAAOO,UAAvB,SACGC,OAAOC,KAAKJ,GAASK,KAAI,SAACC,GAAD,OACxB,wBAEEZ,UAAWC,IAAOY,OAClBC,QAAS,kBAAMP,EAAgBK,IAHjC,SAKGA,GAJIA,S,gBCSAG,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAASjB,UAAWC,IAAOiB,QAA3B,UACE,oBAAIlB,UAAWC,IAAOe,MAAtB,SAA8BA,IAC7BC,MCAME,EAAb,4MACEC,MAAQ,CACNzB,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAOEwB,eAAiB,SAACC,GAChB,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGF,EAAWE,EAAUF,GAAY,OATjD,EAaEG,mBAAqB,WACnB,OAAOhB,OAAOiB,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,MAdlE,EAiBEC,gCAAkC,WAChC,IAAMhC,EAAQ,EAAK2B,qBACnB,OAAO3B,EAAQ,EAAIiC,KAAKC,MAAO,EAAKZ,MAAMzB,KAAOG,EAAS,KAAO,GAnBrE,4CAsBE,WACE,MAA+BmC,KAAKb,MAA5BzB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBqC,EAAUD,KAAKH,kCACfhC,EAAQmC,KAAKR,qBAEnB,OACE,sBAAKzB,UAAWC,IAAOO,UAAvB,UACE,cAAC,EAAD,CAASQ,MAAM,wBAAf,SACE,cAAC,EAAD,CACEV,QAAS2B,KAAKb,MACdb,gBAAiB0B,KAAKZ,mBAI1B,cAAC,EAAD,CAASL,MAAM,aAAf,SACGlB,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBmC,IAGtB,cAAC,EAAD,CAAc9B,QAAQ,+BA9ClC,GAAyB+B,aAsDVhB,ICjDAiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2eb3d309.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1B6HC\",\"container\":\"FeedbackOptions_container__1ur10\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3MDYf\",\"title\":\"Section_title__1IcAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1r2X6\",\"App-logo\":\"App_App-logo__3-XZr\",\"App-logo-spin\":\"App_App-logo-spin__2UuUB\",\"App-header\":\"App_App-header__1AfWH\",\"App-link\":\"App_App-link__H4y48\",\"container\":\"App_container__S4ase\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stats\":\"Statistics_stats__1VMmP\"};","import PropTypes from \"prop-types\";\nimport styles from \"./Statistics.module.css\";\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul className={styles.stats}>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {total}</li>\n      <li>Positive Feedback: {positivePercentage}%</li>\n    </ul>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import PropTypes from \"prop-types\";\nimport styles from \"./FeedbackOptions.module.css\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className={styles.container}>\n      {Object.keys(options).map((option) => (\n        <button\n          key={option}\n          className={styles.button}\n          onClick={() => onLeaveFeedback(option)}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n\n/* \nВынеси блок кнопок в компонент <FeedbackOptions options={} onLeaveFeedback={}>.\n*/\n","import PropTypes from \"prop-types\";\nimport styles from \"./Section.module.css\";\n\nfunction Section({ title, children }) {\n  return (\n    <section className={styles.section}>\n      <h2 className={styles.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n\n/* \nСоздай компонент <Section title=\"\">, \nкоторый рендерит секцию с заголовком и детей (children). \n*/\n","import styles from \"./App.module.css\";\nimport React, { Component } from \"react\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport Notification from \"./components/Notification/Notification\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./components/Section/Section\";\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleFeedback = (feedback) => {\n    this.setState((prevState) => {\n      return { [feedback]: prevState[feedback] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, value) => acc + value);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    return total > 0 ? Math.round((this.state.good / total) * 100) : 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const percent = this.countPositiveFeedbackPercentage();\n    const total = this.countTotalFeedback();\n\n    return (\n      <div className={styles.container}>\n        <Section title=\"Please leave Feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.handleFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total > 0 ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={percent}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* \nПриложение должно отображать количество собранных отзывов для каждой \nкатегории. Приложение не должно сохранять статистику отзывов между \nразными сессиями (обновление страницы).\n\nРасширь функционал приложения так, чтобы в интерфейсе отображалось \nбольше статистики о собранных отзывах. Добавь отображение общего \nколичества собранных отзывов из всех категорий и процент \nположительных отзывов. Для этого создай вспомогательные методы \ncountTotalFeedback() и countPositiveFeedbackPercentage(), \nподсчитывающие эти значения основываясь на данных в состоянии \n(вычисляемые данные).\n\nОберни каждый из <Statistics> и <FeedbackOptions> в созданный компонент секции.\n\nРасширь функционал приложения так, чтобы блок статистики рендерился \nтолько после того, как был собран хотя бы один отзыв. \nСообщение об отсутствиии статистики вынеси в компонент \n<Notification message=\"No feedback given\">.\n*/\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}